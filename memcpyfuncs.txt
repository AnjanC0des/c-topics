memset, memcpy, strcpy, strncpy, sprintf, and snprintf.

1. memset
Purpose: Sets a block of memory to a specific value.

Syntax:

void *memset(void *ptr, int value, size_t num);

Parameters:

ptr: Pointer to the block of memory to fill.
value: Value to set (converted to an unsigned char).
num: Number of bytes to set.
Usage:

char buffer[50];
memset(buffer, 0, sizeof(buffer)); // Sets all bytes in buffer to 0

Nuances:

Useful for initializing arrays or structures.
Be cautious with the size parameter to avoid buffer overflows.
2. memcpy
Purpose: Copies a block of memory from one location to another.

Syntax:

void *memcpy(void *dest, const void *src, size_t num);

Parameters:

dest: Pointer to the destination array.
src: Pointer to the source array.
num: Number of bytes to copy.
Usage:

char src[50] = "Hello, World!";
char dest[50];
memcpy(dest, src, strlen(src) + 1); // Copies the string including the null terminator

Nuances:

Does not handle overlapping memory regions. For overlapping regions, use memmove.
Ensure the destination array is large enough to hold the copied data.
3. strcpy
Purpose: Copies a null-terminated string to another.

Syntax:

char *strcpy(char *dest, const char *src);

Parameters:

dest: Pointer to the destination array.
src: Pointer to the source string.
Usage:

char src[50] = "Hello, World!";
char dest[50];
strcpy(dest, src); // Copies the string including the null terminator

Nuances:

Does not check the size of the destination array, which can lead to buffer overflows1.
Ensure the destination array is large enough to hold the source string.
4. strncpy
Purpose: Copies a specified number of characters from a string to another.

Syntax:

char *strncpy(char *dest, const char *src, size_t num);

Parameters:

dest: Pointer to the destination array.
src: Pointer to the source string.
num: Maximum number of characters to copy.
Usage:

char src[50] = "Hello, World!";
char dest[50];
strncpy(dest, src, 5); // Copies the first 5 characters
dest[5] = '\0'; // Manually null-terminate the string

Nuances:

If src is shorter than num, the remainder of dest is filled with null characters.
If src is longer than num, dest will not be null-terminated unless explicitly done1.
5. sprintf
Purpose: Writes formatted data to a string.

Syntax:

int sprintf(char *str, const char *format, ...);

Parameters:

str: Pointer to the destination string.
format: Format string.
...: Additional arguments.
Usage:

char buffer[50];
sprintf(buffer, "The value is %d", 42); // Writes formatted data to buffer

Nuances:

Does not check the size of the destination buffer, which can lead to buffer overflows.
Use snprintf for safer operations.
6. snprintf
Purpose: Writes formatted data to a string with a size limit.

Syntax:

int snprintf(char *str, size_t size, const char *format, ...);

Parameters:

str: Pointer to the destination string.
size: Maximum number of bytes to write (including the null terminator).
format: Format string.
...: Additional arguments.
Usage:

char buffer[50];
snprintf(buffer, sizeof(buffer), "The value is %d", 42); // Writes formatted data to buffer safely

Nuances:

Ensures that the destination buffer is not overflowed.
Returns the number of characters that would have been written if the buffer was large enough, which can be used to detect truncation.
Summary
memset: Initializes memory with a specific value.
memcpy: Copies memory from one location to another.
strcpy: Copies a null-terminated string.
strncpy: Copies a specified number of characters from a string.
sprintf: Writes formatted data to a string (unsafe for buffer overflows).
snprintf: Writes formatted data to a string with a size limit (safer).

